name: Rollback Kubernetes deployment

on:
  workflow_call:
    inputs:
      project: { required: false, type: string, default: "root" }
      k8s_cluster_name: { required: true, type: string }
      k8s_namespace: { required: true, type: string }
      k8s_deployment_name: { required: false, type: string }
    secrets:
      do_api_token: { required: true }

jobs:
  rollback:
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.do_api_token }}

      - name: Fetch kubeconfig
        shell: bash
        run: doctl kubernetes cluster kubeconfig save ${{ inputs.k8s_cluster_name }}

      - name: Set current deployment
        id: meta
        run: |
          if [[ "${{ inputs.k8s_deployment_name }}" == "" ]]; then
            DEPLOYMENT=$(basename "${GITHUB_REPOSITORY}")
          else
            DEPLOYMENT=${{ inputs.k8s_deployment_name }}
          fi

          if [[ "${{ inputs.project }}" == "root" ]]; then
            echo "deployment=${DEPLOYMENT}" >> "$GITHUB_OUTPUT"
          else
            echo "deployment=${DEPLOYMENT}-${{ inputs.project }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Rollback to previous revision
        run: |
          kubectl rollout undo deployment/${{ steps.meta.outputs.deployment }} \
            --namespace=${{ inputs.k8s_namespace }}

      - name: Wait for rollout to complete
        id: rollout
        continue-on-error: true
        run: |
          kubectl rollout status deployment/${{ steps.meta.outputs.deployment }} \
            --namespace=${{ inputs.k8s_namespace }} --timeout=180s

      - name: Get current image from Kubernetes
        id: current-image
        run: |
          IMAGE=$(kubectl get deployment ${{ steps.meta.outputs.deployment }} \
              --namespace=${{ inputs.k8s_namespace }} -o=jsonpath="{.spec.template.spec.containers[*].image}" )
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Wait for rollback rollout to complete and fail pipeline
        if: steps.rollout.outcome == 'failure'
        run: |
          echo "❌ Deployment ${{ steps.meta.outputs.deployment }} rollback failure. Current image: ${{ steps.current-image.outputs.image }}"
          exit 1

      - name: Notify success
        if: steps.rollout.outcome == 'success'
        run: |
          echo "↩️ Deployment ${{ steps.meta.outputs.deployment }} rollback. Current image: ${{ steps.current-image.outputs.image }}"
