name: "Build & Push Docker Image with Buildx Cache"
description: "Builds and pushes Docker image to DOCR using buildx with registry cache"

inputs:
  project:
    required: true
    description: "Sub-project to build. pass 'root' for repository root"
  registry:
    required: true
    description: "Container registry (e.g. registry.digitalocean.com/my-registry)"
  repository:
    required: true
    description: "Docker repository name (e.g. apps/my-app)"
  tag:
    required: true
    description: "Image tag (e.g. abc123)"
  do_api_token:
    required: true
    description: "DigitalOcean API token"

outputs:
  image:
    description: "Image name with tag"
    value: ${{ steps.meta.outputs.image }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: doctl
        password: ${{ inputs.do_api_token }}

    - name: Set image context and Dockerfile path
      id: meta
      shell: bash
      run: |
        if [[ "${{ inputs.project }}" == "root" ]]; then
          echo "context=." >> "$GITHUB_OUTPUT"
          echo "dockerfile=${{ env.DOCKERFILE }}" >> "$GITHUB_OUTPUT"
          echo "image=${{ inputs.registry }}/${{ inputs.repository }}" >> "$GITHUB_OUTPUT"
        else
          echo "context=${{ inputs.project }}" >> "$GITHUB_OUTPUT"
          echo "dockerfile=${{ inputs.project }}/${{ env.DOCKERFILE }}" >> "$GITHUB_OUTPUT"
          echo "image=${{ inputs.registry }}/${{ inputs.repository }}-${{ inputs.project }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ steps.meta.outputs.context }}
        file: ${{ steps.meta.outputs.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.image }}:${{ inputs.tag }}
        cache-from: type=registry,ref=${{ steps.meta.outputs.image }}:buildcache
        cache-to: type=registry,ref=${{ steps.meta.outputs.image }}:buildcache,mode=max
